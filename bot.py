from random import choice

from aiogram import Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.types import Message
from aiogram.utils.executor import start_polling

from config import AUTH_USERS, BOT_TOKEN, CONSOLE_COLORS
from db import Database
from keyboards import cancel_kb, launch_que_kb, start_kb
from playberries import wildberries
from sfms import CreateQueFSM, CreateTaskFSM, DeleteTaskFSM


storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)


async def make_reply(db_data: tuple) -> str:
    if not db_data:
        reply = '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á!'
    else:
        tasks = []
        for t in db_data:
            string = (
                f'üî∏ id: {t[0]} | –ó–∞–ø—Ä–æ—Å: {t[1]} |'
                f'–ê—Ä—Ç–∏–∫—É–ª: {t[2]} | –ü–æ–≤—Ç–æ—Ä–æ–≤: {t[3]}'
            )
            tasks.append(string)
            delimeter = '\n' + ('-' * 90) +'\n'
            reply = delimeter.join(tasks)
    return reply


@dp.message_handler(state=CreateQueFSM.que)
async def register_tasks(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(
            f'‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
            reply_markup=start_kb
        )
    else:
        task_id = message.text
        try:
            async with Database() as base:
                task = await base.get_one(task_id)
        except Exception as ex:
            await message.answer(
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥',
                reply_markup=cancel_kb)
        if not task:
            await message.answer(
                '‚ùå –ù–µ—Ç –∑–∞–¥–∞—á —Å —Ç–∞–∫–∏–º id',
                reply_markup=cancel_kb)
        else:
            async with state.proxy() as data:
                data['que'] = task
            await message.answer(
                f'‚úÖ –ó–∞–¥–∞—á–∞ {message.text} –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É',
                reply_markup=launch_que_kb
            )
            await message.answer('‚öôÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏')
            await CreateQueFSM.next()
    

@dp.message_handler(state=DeleteTaskFSM.delete)
async def register_tasks(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(
            f'‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
            reply_markup=start_kb
        )
    else:
        task = message.text
        async with Database() as base:
            await base.delete(task)
        await state.finish()
        await message.answer(
            f'‚úÖ –ó–∞–¥–∞—á–∞ {task} —É–¥–∞–ª–µ–Ω–∞',
            reply_markup=start_kb
        )


@dp.message_handler(state=CreateQueFSM.finish)
async def que_handler(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    else:
        async with state.proxy() as data:
            task = data['que']
            if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
                await state.finish()
                await message.answer(
                    f'‚ùå –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ {task} –æ—Ç–º–µ–Ω—ë–Ω',
                    reply_markup=start_kb
                )
            elif message.text == '‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å':
                await message.answer(
                    f'üöÄ –ó–∞–¥–∞—á–∞ {task} –∑–∞–ø—É—â–µ–Ω–∞', 
                    reply_markup=start_kb)
                await state.finish()
                result = await wildberries(task, choice(CONSOLE_COLORS))
                if not result:
                    await message.answer(
                        f'‚ùå –ó–∞–¥–∞—á–∞ {task} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π',
                        reply_markup=start_kb
                    )
                else:    
                    await message.answer(
                        f'‚úÖ –ó–∞–¥–∞—á–∞ {task} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
                        reply_markup=start_kb
                    )
            
    
@dp.message_handler(state=CreateTaskFSM.create)
async def create_task(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω') 
    elif message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer(
            f'‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞',
            reply_markup=start_kb
        )
    else:
        task = message.text.split(', ')
        if len(task) != 3:
            await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')
        else:
            async with Database() as base:
                await base.add(tuple(task))
            await message.answer(
                f'‚úÖ –ó–∞–¥–∞—á–∞ {task} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                reply_markup=start_kb
            )
            await state.finish()


@dp.message_handler(text='üí° –í—Å–µ –∑–∞–¥–∞—á–∏')
async def get_all_tasks(message: Message):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    else:
        async with Database() as base:
            db_data = await base.get_all()
        reply = await make_reply(db_data)
        await message.answer(
            reply, 
            reply_markup=start_kb
        )
    

@dp.message_handler(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
async def get_task_params(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')   
    else: 
        await message.answer(
            ('‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏: <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>, '
             '<–∞—Ä—Ç–∏–∫—É–ª>, <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤>')
        )
        await message.answer(
            '‚öôÔ∏è –ü—Ä–∏–º–µ—Ä: iPhone, 1234567, 100',
            reply_markup=cancel_kb
        )
        await CreateTaskFSM.create.set()


@dp.message_handler(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
async def delete_task(message: Message, state: FSMContext):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    else:
        await message.answer(
            '‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ id –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
            reply_markup=cancel_kb
        )
        await DeleteTaskFSM.delete.set()



@dp.message_handler(text='‚öôÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É')
async def create_que(message: Message):
    await message.delete()
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')    
    await message.answer(
        '‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ id –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞',
        reply_markup=cancel_kb
    )
    await CreateQueFSM.que.set()


@dp.message_handler(commands=['start'])
async def start(message: Message):
    await message.delete()
    print(message.from_id)
    if not message.from_id in AUTH_USERS:
        await message.answer('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
    else:
        await message.answer(
            '‚òÄÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
            reply_markup=start_kb
        )


if __name__ == "__main__":
    start_polling(dp, timeout=10000, skip_updates=True)
